{"ast":null,"code":"// Import required modules\nconst express = require(\"express\");\nconst cors = require(\"cors\");\nconst multer = require(\"multer\");\nconst nodemailer = require(\"nodemailer\");\nconst bodyParser = require(\"body-parser\");\nconst mongoose = require(\"mongoose\");\nrequire(\"dotenv\").config();\n\n// Initialize Express\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\n\n// File upload configuration using multer\nconst upload = multer({\n  dest: \"uploads/\"\n});\n\n// Connect to MongoDB\nconst mongoURI = process.env.MONGO_URI; // Add your MongoDB connection string in the .env file\nmongoose.connect(mongoURI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nconst db = mongoose.connection;\ndb.once(\"open\", () => console.log(\"Connected to MongoDB\"));\ndb.on(\"error\", err => console.error(\"MongoDB connection error:\", err));\n\n// Define the Service schema and model\nconst ServiceSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  cost: {\n    type: Number,\n    required: true\n  },\n  description: {\n    type: String,\n    required: true\n  },\n  documents: [String],\n  image: {\n    type: String,\n    default: \"https://mamatafertility.com/wp-content/themes/consultix/images/no-image-found-360x250.png\"\n  }\n});\nconst Service = mongoose.model(\"Service\", ServiceSchema);\n\n// Admin login endpoint\napp.post(\"/api/admin-login\", (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  console.log(\"Admin Login Attempt:\", {\n    username\n  });\n  if (username === process.env.ADMIN_USERNAME && password === process.env.ADMIN_PASSWORD) {\n    return res.status(200).json({\n      message: \"Authentication successful\"\n    });\n  }\n  res.status(401).json({\n    message: \"Invalid username or password\"\n  });\n});\n\n// Temporary in-memory storage\nconst submissions = [];\n\n// API to handle form submissions\napp.post(\"/api/submit-form\", upload.array(\"documents\"), async (req, res) => {\n  const {\n    name,\n    mobile,\n    email,\n    services\n  } = req.body;\n  const files = req.files;\n  try {\n    const transporter = nodemailer.createTransport({\n      service: \"gmail\",\n      auth: {\n        user: process.env.EMAIL_USER,\n        pass: process.env.EMAIL_PASS\n      }\n    });\n    const mailOptions = {\n      from: process.env.EMAIL_USER,\n      to: \"tarunbusinessmail@gmail.com\",\n      // Replace with your email\n      subject: \"New Form Submission with Documents\",\n      text: `You have received a new submission:\nName: ${name}\nMobile: ${mobile}\nEmail: ${email}\nService: ${services}\nAttached documents are included.`,\n      attachments: files.map(file => ({\n        filename: file.originalname,\n        path: file.path\n      }))\n    };\n    await transporter.sendMail(mailOptions);\n    res.status(200).send({\n      message: \"Form submitted successfully!\"\n    });\n  } catch (error) {\n    console.error(\"Error occurred while sending email:\", error);\n    res.status(500).send({\n      error: \"Internal Server Error\",\n      details: error.message\n    });\n  }\n});\n\n// API to fetch submissions (protected)\napp.get(\"/api/submissions\", (req, res) => {\n  const {\n    username,\n    password\n  } = req.headers;\n  if (username === process.env.ADMIN_USERNAME && password === process.env.ADMIN_PASSWORD) {\n    return res.status(200).json(submissions);\n  }\n  res.status(401).json({\n    message: \"Unauthorized access\"\n  });\n});\n\n// CRUD Operations for Services\n// Fetch all services\napp.get(\"/api/services\", async (req, res) => {\n  try {\n    const services = await Service.find();\n    res.status(200).json(services);\n  } catch (err) {\n    res.status(500).json({\n      message: err.message\n    });\n  }\n});\n\n// Add a new service\napp.post(\"/api/services\", async (req, res) => {\n  const {\n    name,\n    cost,\n    description,\n    documents,\n    image\n  } = req.body;\n  const newService = new Service({\n    name,\n    cost,\n    description,\n    documents,\n    image\n  });\n  try {\n    const savedService = await newService.save();\n    res.status(201).json(savedService);\n  } catch (err) {\n    res.status(400).json({\n      message: err.message\n    });\n  }\n});\n\n// Update a service\napp.put(\"/api/services/:id\", async (req, res) => {\n  try {\n    const updatedService = await Service.findByIdAndUpdate(req.params.id, req.body, {\n      new: true\n    });\n    res.status(200).json(updatedService);\n  } catch (err) {\n    res.status(400).json({\n      message: err.message\n    });\n  }\n});\n\n// Delete a service\napp.delete(\"/api/services/:id\", async (req, res) => {\n  try {\n    await Service.findByIdAndDelete(req.params.id);\n    res.status(200).json({\n      message: \"Service deleted successfully\"\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: err.message\n    });\n  }\n});\napp.post(\"/api/clients/submit\", upload.array(\"documents\"), (req, res) => {\n  const {\n    fullName,\n    mobile,\n    email\n  } = req.body;\n  const documents = req.files;\n  console.log(\"Client Submission:\", {\n    fullName,\n    mobile,\n    email,\n    documents\n  });\n\n  // Save to database or send email notification as required\n\n  res.status(200).json({\n    message: \"Form submitted successfully\"\n  });\n});\n\n// Backend: Fetch single service by ID\napp.get(\"/api/services/:id\", async (req, res) => {\n  const {\n    id\n  } = req.params; // Extract the service ID from the request parameters\n  try {\n    const service = await Service.findById(id); // Fetch service from the MongoDB database\n    if (!service) {\n      // Return 404 if no service is found with the given ID\n      return res.status(404).json({\n        message: \"Service not found\"\n      });\n    }\n    res.status(200).json(service); // Return the service details\n  } catch (error) {\n    // Handle errors (e.g., invalid ID format or database issues)\n    console.error(\"Error fetching service:\", error);\n    res.status(500).json({\n      message: \"Internal server error\"\n    });\n  }\n});\n\n// Start the server\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","multer","nodemailer","bodyParser","mongoose","config","app","PORT","process","env","use","json","urlencoded","extended","upload","dest","mongoURI","MONGO_URI","connect","useNewUrlParser","useUnifiedTopology","db","connection","once","console","log","on","err","error","ServiceSchema","Schema","name","type","String","required","cost","Number","description","documents","image","default","Service","model","post","req","res","username","password","body","ADMIN_USERNAME","ADMIN_PASSWORD","status","message","submissions","array","mobile","email","services","files","transporter","createTransport","service","auth","user","EMAIL_USER","pass","EMAIL_PASS","mailOptions","from","to","subject","text","attachments","map","file","filename","originalname","path","sendMail","send","details","get","headers","find","newService","savedService","save","put","updatedService","findByIdAndUpdate","params","id","new","delete","findByIdAndDelete","fullName","findById","listen"],"sources":["C:/Users/HP/Documents/Coding/Paid Project/Jan Seva Kendra/jan-seva-kendra-frontend/src/pages/ClientForm.js"],"sourcesContent":["// Import required modules\r\nconst express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst multer = require(\"multer\");\r\nconst nodemailer = require(\"nodemailer\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst mongoose = require(\"mongoose\");\r\nrequire(\"dotenv\").config();\r\n\r\n// Initialize Express\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n// File upload configuration using multer\r\nconst upload = multer({ dest: \"uploads/\" });\r\n\r\n// Connect to MongoDB\r\nconst mongoURI = process.env.MONGO_URI; // Add your MongoDB connection string in the .env file\r\nmongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true });\r\nconst db = mongoose.connection;\r\ndb.once(\"open\", () => console.log(\"Connected to MongoDB\"));\r\ndb.on(\"error\", (err) => console.error(\"MongoDB connection error:\", err));\r\n\r\n// Define the Service schema and model\r\nconst ServiceSchema = new mongoose.Schema({\r\n    name: { type: String, required: true },\r\n    cost: { type: Number, required: true },\r\n    description: { type: String, required: true },\r\n    documents: [String],\r\n    image: { type: String, default: \"https://mamatafertility.com/wp-content/themes/consultix/images/no-image-found-360x250.png\" },\r\n});\r\nconst Service = mongoose.model(\"Service\", ServiceSchema);\r\n\r\n// Admin login endpoint\r\napp.post(\"/api/admin-login\", (req, res) => {\r\n    const { username, password } = req.body;\r\n\r\n    console.log(\"Admin Login Attempt:\", { username });\r\n\r\n    if (username === process.env.ADMIN_USERNAME && password === process.env.ADMIN_PASSWORD) {\r\n        return res.status(200).json({ message: \"Authentication successful\" });\r\n    }\r\n\r\n    res.status(401).json({ message: \"Invalid username or password\" });\r\n});\r\n\r\n// Temporary in-memory storage\r\nconst submissions = [];\r\n\r\n// API to handle form submissions\r\napp.post(\"/api/submit-form\", upload.array(\"documents\"), async (req, res) => {\r\n    const { name, mobile, email, services } = req.body;\r\n    const files = req.files;\r\n\r\n    try {\r\n        const transporter = nodemailer.createTransport({\r\n            service: \"gmail\",\r\n            auth: {\r\n                user: process.env.EMAIL_USER,\r\n                pass: process.env.EMAIL_PASS,\r\n            },\r\n        });\r\n\r\n        const mailOptions = {\r\n            from: process.env.EMAIL_USER,\r\n            to: \"tarunbusinessmail@gmail.com\", // Replace with your email\r\n            subject: \"New Form Submission with Documents\",\r\n            text: `You have received a new submission:\r\nName: ${name}\r\nMobile: ${mobile}\r\nEmail: ${email}\r\nService: ${services}\r\nAttached documents are included.`,\r\n            attachments: files.map((file) => ({\r\n                filename: file.originalname,\r\n                path: file.path,\r\n            })),\r\n        };\r\n\r\n        await transporter.sendMail(mailOptions);\r\n        res.status(200).send({ message: \"Form submitted successfully!\" });\r\n    } catch (error) {\r\n        console.error(\"Error occurred while sending email:\", error);\r\n        res.status(500).send({ error: \"Internal Server Error\", details: error.message });\r\n    }\r\n});\r\n\r\n// API to fetch submissions (protected)\r\napp.get(\"/api/submissions\", (req, res) => {\r\n    const { username, password } = req.headers;\r\n\r\n    if (username === process.env.ADMIN_USERNAME && password === process.env.ADMIN_PASSWORD) {\r\n        return res.status(200).json(submissions);\r\n    }\r\n\r\n    res.status(401).json({ message: \"Unauthorized access\" });\r\n});\r\n\r\n// CRUD Operations for Services\r\n// Fetch all services\r\napp.get(\"/api/services\", async (req, res) => {\r\n    try {\r\n        const services = await Service.find();\r\n        res.status(200).json(services);\r\n    } catch (err) {\r\n        res.status(500).json({ message: err.message });\r\n    }\r\n});\r\n\r\n// Add a new service\r\napp.post(\"/api/services\", async (req, res) => {\r\n    const { name, cost, description, documents, image } = req.body;\r\n    const newService = new Service({ name, cost, description, documents, image });\r\n\r\n    try {\r\n        const savedService = await newService.save();\r\n        res.status(201).json(savedService);\r\n    } catch (err) {\r\n        res.status(400).json({ message: err.message });\r\n    }\r\n});\r\n\r\n// Update a service\r\napp.put(\"/api/services/:id\", async (req, res) => {\r\n    try {\r\n        const updatedService = await Service.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n        res.status(200).json(updatedService);\r\n    } catch (err) {\r\n        res.status(400).json({ message: err.message });\r\n    }\r\n});\r\n\r\n// Delete a service\r\napp.delete(\"/api/services/:id\", async (req, res) => {\r\n    try {\r\n        await Service.findByIdAndDelete(req.params.id);\r\n        res.status(200).json({ message: \"Service deleted successfully\" });\r\n    } catch (err) {\r\n        res.status(500).json({ message: err.message });\r\n    }\r\n});\r\n\r\napp.post(\"/api/clients/submit\", upload.array(\"documents\"), (req, res) => {\r\n    const { fullName, mobile, email } = req.body;\r\n    const documents = req.files;\r\n\r\n    console.log(\"Client Submission:\", { fullName, mobile, email, documents });\r\n\r\n    // Save to database or send email notification as required\r\n\r\n    res.status(200).json({ message: \"Form submitted successfully\" });\r\n});\r\n\r\n// Backend: Fetch single service by ID\r\napp.get(\"/api/services/:id\", async (req, res) => {\r\n    const { id } = req.params; // Extract the service ID from the request parameters\r\n    try {\r\n        const service = await Service.findById(id); // Fetch service from the MongoDB database\r\n        if (!service) {\r\n            // Return 404 if no service is found with the given ID\r\n            return res.status(404).json({ message: \"Service not found\" });\r\n        }\r\n        res.status(200).json(service); // Return the service details\r\n    } catch (error) {\r\n        // Handle errors (e.g., invalid ID format or database issues)\r\n        console.error(\"Error fetching service:\", error);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n});\r\n\r\n\r\n// Start the server\r\napp.listen(PORT, () => {\r\n    console.log(`Server running on http://localhost:${PORT}`);\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}